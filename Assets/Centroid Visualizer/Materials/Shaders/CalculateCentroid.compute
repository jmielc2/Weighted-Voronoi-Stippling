#pragma target 5.0
#pragma kernel Condense
#pragma kernel Reduce
#pragma use_dxc

Texture2D _VoronoiDiagram;
RWStructuredBuffer<float4x4> _PositionMatrixBuffer;
RWStructuredBuffer<float3> _ColorBuffer;

uniform uint _NumRegions;
uniform uint _ImageWidth, _ImageHeight;
uniform float _Width, _Height;

RWStructuredBuffer<float3> _WaveBuffer;
uniform uint _NumWavesPerDispatch;

float2 PixelToWorldCoord(float2 pixel) {
    return float2(
        (((pixel.x + 0.5) / _ImageWidth) - 0.5) * _Width,
        (((pixel.y + 0.5) / _ImageHeight) - 0.5) * _Height
    );
}

// Centroid Algorithm
/*
Part One: Condense
2) Ballot wave front with predicate that checks if pixelVoronoiId == voronoiId.
3) Divide voronoiPixelIndex by count for pixels where pixelVoronoiId == voronoiId
4) Sum dividends using WaveActiveSum and write sum into waveBuffer
5) AllMemoryBarrierWithGroupSync to guarantee all waves have completed

Part Two: Reduce
6) id.y now represents waveId.
7) Reduce all warpSums to single value using WaveActiveSum and parallel reduction technique.
8) warpSum represents average voronoiPixelIndex for voronoi with ID of voronoiId, so convert to float2 to get centroid.
*/

[numthreads(1, 32, 1)]
void Condense(uint3 dispatchId : SV_DispatchThreadID, uint groupId : SV_GroupId) {
    /*
    if (dispatchId.y >= _ImageWidth * _ImageHeight) {
        return;
    }
    const uint voronoiId = dispatchId.x;
    uint2 pixelPosition = uint2(dispatchId.y, floor(dispatchId.y / _ImageWidth));
    pixelPosition.x -= pixelPosition.y * _ImageWidth;
    const uint pixelVoronoiId = floor(_VoronoiDiagram[pixelPosition].r * _NumRegions + 0.5);
    bool isActive = (pixelVoronoiId == voronoiId);
    uint count = WaveActiveCountBits(isActive);
    if (count == 0) {
        _WaveBuffer[dispatchId.x * _NumWavesPerDispatch + groupId] = float3(0, 0, 0);
        return;
    }
    if (!isActive) {
        return;
    }
    float2 centroidPos = float2(
        pixelPosition.x / (float) count,
        pixelPosition.y / (float) count
    );
    centroidPos.x = WaveActiveSum(centroidPos.x);
    centroidPos.y = WaveActiveSum(centroidPos.y);
    if (WaveIsFirstLane()) {
        _WaveBuffer[dispatchId.x * _NumWavesPerDispatch + groupId] = float3(centroidPos, 1);
    }
    */
}

[numthreads(1, 32, 1)]
void Reduce(uint3 id : SV_DispatchThreadID) {
    /*
    if (id.y >= _NumWavesPerDispatch) {
        return;
    }
    for (int i = 1; i < _NumWavesPerDispatch; i *= 2) {
        if (id.y % (i * 2) == 0) {
            if (id.y + i < _NumWavesPerDispatch) {
                _WaveBuffer[id.x * _NumWavesPerDispatch + id.y] += _WaveBuffer[id.x * _NumWavesPerDispatch + id.y + i];
            }
        } else {
            return;
        }
    }
    
    if (WaveIsFirstLane()) {
        // _PositionMatrixBuffer[id.x]._m03_m13 = PixelToWorldCoord(_WaveBuffer[id.x * _NumWavesPerDispatch] / _NumWavesPerDispatch);
        _ColorBuffer[id.x].gb = PixelToWorldCoord(_WaveBuffer[id.x * _NumWavesPerDispatch].xy / _WaveBuffer[id.x * _NumWavesPerDispatch].z);
    }
*/
    _ColorBuffer[id.x] = float3(0.2, 0.5, 0.8);
}
