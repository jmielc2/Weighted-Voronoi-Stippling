#pragma target 4.5
#pragma kernel CalculateCentroid
#pragma kernel GatherData

struct VoronoiRegion {
    int2 centerOfMass;
    int totalMass;
};

struct VertexAttributes {
    float4 position;
    float color;
};

Texture2D _VoronoiDiagram;
RWStructuredBuffer<VoronoiRegion> _VoronoiData;
RWStructuredBuffer<float4x4> _PositionMatrixBuffer;
uniform uint _NumRegions;
uniform uint _ImageWidth, _ImageHeight;
uniform float _Width, _Height;

float2 PixelToWorldCoord(float2 pixel) {
    return float2(
        (((pixel.x + 0.5) / _ImageWidth) - 0.5) * _Width,
        (((pixel.y + 0.5) / _ImageHeight) - 0.5) * _Height
    );
}

[numthreads(8, 8, 1)]
void GatherData(uint3 id : SV_DispatchThreadID) {
    if (id.x >= _ImageWidth || id.y >= _ImageHeight) {
        return;
    }
    float4 color = _VoronoiDiagram[id.xy];
    int voronoiId = floor(color.x * _NumRegions + 0.5);
    InterlockedAdd(_VoronoiData[voronoiId].totalMass, 1);
    InterlockedAdd(_VoronoiData[voronoiId].centerOfMass.x, id.x);
    InterlockedAdd(_VoronoiData[voronoiId].centerOfMass.y, id.y);
}

[numthreads(64, 1, 1)]
void CalculateCentroid(uint3 id : SV_DispatchThreadID) {
    if (id.x >= _NumRegions) {
        return;
    }
    float2 position = _PositionMatrixBuffer[id.x]._m03_m13;
    
    // Update position here
    VoronoiRegion region = _VoronoiData[id.x];
    float2 centerOfMass = region.centerOfMass;
    float totalMass = region.totalMass;
    if (totalMass != 0) {
        centerOfMass /= totalMass;
        position.xy = PixelToWorldCoord(centerOfMass);
    }
    _PositionMatrixBuffer[id.x]._m03_m13 = position;
    
    region.centerOfMass = float2(0, 0);
    region.totalMass = 0;
    _VoronoiData[id.x] = region;
}
