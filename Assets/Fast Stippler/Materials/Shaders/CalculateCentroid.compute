#pragma kernel Condense
#pragma kernel Reduce

Texture2D<float> _VoronoiDiagram;
Texture2D<float4> _SourceImage;
RWStructuredBuffer<float4x4> _PositionMatrixBuffer;
RWStructuredBuffer<float3> _WeightedBuffer;
RWStructuredBuffer<float3> _UnweightedBuffer;
RWStructuredBuffer<float> _Scale;

uniform uint _NumRegions;
uniform uint _ImageWidth, _ImageHeight;
uniform uint _SourceImageWidth, _SourceImageHeight;
uniform float _Width, _Height;
uniform uint _NumGroupsPerDispatch, _Stride, _Base, _Remaining;

groupshared float3 weightedCentroid[64];
groupshared float3 unweightedCentroid[64];

groupshared float3 weightedReduce[256];
groupshared float3 unweightedReduce[256];

float2 PixelToWorldCoord(uint2 pixelPos) {
    return float2(
        (((pixelPos.x + 0.5) / _ImageWidth) - 0.5) * _Width,
        (((pixelPos.y + 0.5) / _ImageHeight) - 0.5) * _Height
    );
}

float Luminance(float3 pixel) {
    return (0.299 * pixel.r) + (0.587 * pixel.g) + (0.114 * pixel.b);
}

// Centroid Algorithm
[numthreads(1, 8, 8)]
void Condense(uint3 id : SV_DispatchThreadID, uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID) {
    // Initialize group shared memory to 0
    const uint index = tid.z * 8 + tid.y;
    if (id.y < _ImageWidth && id.z < _ImageHeight) {
        uint pixelVoronoiId = _VoronoiDiagram[id.yz] * _NumRegions + 0.5;
        
        // If voronoi Id of current pixel matches the voronoi Id we're processing (id.x),
        // then add its position to groupshared memory
        float2 worldPos = PixelToWorldCoord(id.yz);
        if (pixelVoronoiId == _Base + id.x) {
            float weight = 1.0 - Luminance(_SourceImage[id.yz * 2].rgb);
            weightedCentroid[index] = float3(worldPos * weight, weight);
            unweightedCentroid[index] = float3(worldPos, 1);
        } else {
            weightedCentroid[index] = float3(0, 0, 0);
            unweightedCentroid[index] = float3(0, 0, 0);
        }
    } else {
        weightedCentroid[index] = float3(0, 0, 0);
        unweightedCentroid[index] = float3(0, 0, 0);
    }
    GroupMemoryBarrierWithGroupSync();

    // Reduce
    [unroll]
    for (uint i = 32; i > 0; i >>= 1) {
        if (index < i) {
            weightedCentroid[index] += weightedCentroid[index + i];
            unweightedCentroid[index] += unweightedCentroid[index + i];
        }
        GroupMemoryBarrierWithGroupSync();
    }

    // Write reduced result to global memory
    if (index == 0) {
        const uint gindex = gid.z * (_ImageWidth / 8) + gid.y;
        _WeightedBuffer[(id.x * _NumGroupsPerDispatch) + gindex] = weightedCentroid[0];
        _UnweightedBuffer[(id.x * _NumGroupsPerDispatch) + gindex] = unweightedCentroid[0];
    }
}

// https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf
[numthreads(1, 256, 1)]
void Reduce(uint3 id : SV_DispatchThreadID, uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID) {
    // If we are within bounds of remaining values, add it to shared memory
    if (id.y < _Remaining) {
        weightedReduce[tid.y] = _WeightedBuffer[(id.x * _NumGroupsPerDispatch) + (id.y * _Stride)];
        unweightedReduce[tid.y] = _UnweightedBuffer[(id.x * _NumGroupsPerDispatch) + (id.y * _Stride)];
    } else {
        weightedReduce[tid.y] = float3(0, 0, 0);
        unweightedReduce[tid.y] = float3(0, 0, 0);
    }
    GroupMemoryBarrierWithGroupSync();
    
    // Reduce
    [unroll]
    for (uint s = 128; s > 0; s >>= 1) {
        if (tid.y < s) {
            weightedReduce[tid.y] += weightedReduce[tid.y + s];
            unweightedReduce[tid.y] += unweightedReduce[tid.y + s];
        }
        GroupMemoryBarrierWithGroupSync();
    }

    if (tid.y == 0) {
        if (_Stride * 256 < _NumGroupsPerDispatch) {
            // If there are remaining iterations, write back to global memory for next iteration
            _WeightedBuffer[(id.x * _NumGroupsPerDispatch) + (gid.y * _Stride * 256)] = weightedReduce[0];
            _UnweightedBuffer[(id.x * _NumGroupsPerDispatch) + (gid.y * _Stride * 256)] = unweightedReduce[0];
        } else {
            float3 uCentroid = unweightedReduce[0];
            float3 wCentroid = weightedReduce[0];
            _Scale[_Base + id.x] = 0.02 + ((wCentroid.z * 0.06) / (uCentroid.z + 1));
            float3 centroidData = float3(0, 0, 0);
            if (weightedReduce[0].z - 0.01 > 0) {
                _PositionMatrixBuffer[_Base + id.x]._m03_m13 = wCentroid.xy / wCentroid.z;
            } else if (unweightedReduce[0].z > 0) {
                _PositionMatrixBuffer[_Base + id.x]._m03_m13 = uCentroid.xy / uCentroid.z;
            }
        }
    }
}
